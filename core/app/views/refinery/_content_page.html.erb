<%
  # provide a default array for collecting CSS for sections
  css = []

  # if 'sections' is passed in as a local_assigns, all of this is ignored.
  #  default sections if there are no assigned sections
  section_config = ActiveSupport::OrderedHash.new  #correct method name
  if local_assigns[:sections].blank?
    section_config= {
      :body_content_title => {:fallback=>page_title, :title=>true},
      :body_content_left => {},
      :body_content_right => {}
    }
    #process page sections 
    @page.parts.collect do |part|
      title_symbol=part.to_title_symbol
      title_symbol = :body_content_right  if title_symbol==:body
      title_symbol = :body_content_left   if title_symbol==:side_body
      section_config[title_symbol]=part.to_section
    end
    #delete hidden sections
    section_config.each do |title_symbol,section|
      if local_assigns[:hide_sections].include? title_symbol
        section_config.delete(title_symbol)
        css < "no_#{title_symbol
      end
    end
  else
    #since we don't expect a hash from local_assigns[:sections]
    local_assigns[:sections].each do |section|
      section_config[section[:yield]]=section
    end
  end
  #render html for these sections
  section_config.keys.each do |yield_sym|
  end
    section = section_config[:yield_sym]
    #render_section_html 
    section[:html] = yield(yield_sym) if yield_sym.present?

    if section[:html].blank? and !local_assigns[:show_empty_sections] and
       !local_assigns[:remove_automatic_sections] and section.keys.include?(:fallback) and
       section[:fallback].present?
      section[:html] = raw(section[:fallback])
    end

    dom_id = section[:id] || yield_sym
    if section[:html].present?
      if section[:title]
        section[:html] = "<h1 id='#{dom_id}'>#{section[:html]}</h1>".html_safe
      else
        section[:html] = "<section id='#{dom_id}'><div class='inner'>#{section[:html]}</div></section>".html_safe
      end
    else
      css << "no_#{dom_id}"
    end
  end
-%>
<section id='body_content'<%= " class='#{css.join(' ')}'" if css.present? %>>
  <%= raw section_config.values.collect{|section| section[:html]}*"\n" -%> 
</section>
<%= render :partial => '/refinery/draft_page_message' unless @page.nil? or @page.live? -%>
